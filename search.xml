<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Javascript学习笔记-Day4]]></title>
      <url>https://imjohnny.github.io/2016/05/30/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Day4/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/learnDay4.jpg" alt=""><br>Day4<br>今天我们一起来聊聊变量、运算符和流程控制。<br><a id="more"></a></p>
<h2 id="1-变量的作用域"><a href="#1-变量的作用域" class="headerlink" title="1.变量的作用域"></a>1.变量的作用域</h2><p>所谓作用域就是变量在哪里起作用，可以访问到的区域。<br>变量分为全局变量和局部变量：</p>
<ul>
<li>全局变量 函数外的变量，在函数内外都可以访问到。</li>
<li>局部变量 函数内的变量，只能在函数内才可以访问到。</li>
</ul>
<p>从变量作用域就引申出了闭包的概念：子函数可以访问父函数的变量，但是反过来无法访问。</p>
<h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h2><p>建议类型前缀+首字母大写（路径/作用）<br>比如:oDiv,oUl,aLi等</p>
<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h2><ol>
<li>算数运算符：数字类型 +、-、*、/、%</li>
<li>赋值：=、+=、-=、*=、/=、%=</li>
<li>比较：返回true/false &lt;，&gt;，&gt;=，&lt;=，==，===，！=，！==</li>
<li>逻辑：返回true/false<br>与&amp;&amp;、或||、非!<br>表达式 &amp;&amp; 表达式 与符号两边的内容都为真，则返回true<br>表达式 || 表达式 或符号两边的内容有一个是真，返回true<br>!表达式 取反</li>
</ol>
<p>表达式的优先级：算数&gt;比较&gt;逻辑&gt;赋值</p>
<h2 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4.流程控制"></a>4.流程控制</h2><ul>
<li><p>if-else</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)&#123;</span><br><span class="line">	<span class="comment">//code</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(判断条件)&#123;</span><br><span class="line">   case 情况1:</span><br><span class="line">        代码1</span><br><span class="line">        break;//不能省略</span><br><span class="line">   case 情况2:</span><br><span class="line">        代码2</span><br><span class="line">        break;</span><br><span class="line">   ....</span><br><span class="line">   default://默认情况，可以省略</span><br><span class="line">        代码n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>-三目运算<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件? 代码<span class="number">1</span>：代码<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>一般用在以下2种情况：<br>1.条件赋值var b = 条件?条件1:条件2<br>2.两种情况的判断</p>
<p>break     跳出循环<br>出现在switch里     ==     跳出switch判断<br>出现在循环里     ==     跳出循环<br>continue     跳过此次循环，继续下次循环<br>出现在for     ==     跳过此次循环</p>
<h2 id="5-什么是真值？什么是假值？"><a href="#5-什么是真值？什么是假值？" class="headerlink" title="5.什么是真值？什么是假值？"></a>5.什么是真值？什么是假值？</h2><p>JS中的真值包括-true 非空字符 非零数字 非空对象<br>假值-false 空字符 0 空对象null undefined NaN</p>
<h2 id="6-如何获取非行间样式？"><a href="#6-如何获取非行间样式？" class="headerlink" title="6.如何获取非行间样式？"></a>6.如何获取非行间样式？</h2><p>IE低版本下：obj.currentStyle.css属性名<br>Chrome/Firefox/IE高版本：getComputedStyle(obj,false).css属性名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getStyle=<span class="function"><span class="keyword">function</span>(<span class="params">obj,attr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> obj.currentStyle?obj.currentStyle[atrr]:getComputedStyle(obj,<span class="literal">false</span>)[attr];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//currentStyle/getComputed不可以获取复合样式</span></span><br></pre></td></tr></table></figure></p>
<h2 id="7-随机数的获取"><a href="#7-随机数的获取" class="headerlink" title="7.随机数的获取"></a>7.随机数的获取</h2><p>说到随机数不得不提静态方法Math.random();<br>随机返回一个[0,1)区间的数字。<br>[n,m)固定范围的随机数获取公式：<br><strong>n+Math.random()*(m-n)</strong></p>
<h2 id="8-eval"><a href="#8-eval" class="headerlink" title="8.eval()"></a>8.eval()</h2><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。<br>eval(string)<br>简单点来说就是把字符当做代码来执行。</p>
<h2 id="9-关于函数的返回值"><a href="#9-关于函数的返回值" class="headerlink" title="9.关于函数的返回值"></a>9.关于函数的返回值</h2><p>函数执行完毕，默认返回undefined<br>如果需要函数返回具体的值，使用return 变量/value;<br>一旦return之后：后续的代码不再执行，直接跳出了函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件) <span class="keyword">return</span>;<span class="comment">//直接跳出，不执行后续代码</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于prototype、原型链和继承的关系]]></title>
      <url>https://imjohnny.github.io/2016/05/28/%E5%85%B3%E4%BA%8Eprototype%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>我觉得搞懂prototype、原型链和继承的关系，对精通和掌握Javascript这门语言是非常重要的。<br><img src="/uploads/prototype.jpg" alt=""><br><a id="more"></a></p>
<h2 id="1-到底什么是原型？"><a href="#1-到底什么是原型？" class="headerlink" title="1.到底什么是原型？"></a>1.到底什么是原型？</h2><p>在Javascript权威指南上面有这样一段定义：</p>
<blockquote>
<p>一个对象的原型就是它的构造函数的prototype的值。所有的函数都有一个prototype属性，当这个函数被定义时，prototype属性自动创建和初始化。prototype属性的初始化值是一个对象，这个对象只带有一个属性。这个属性名为constructor，它指向和原型相关联的那个构造函数。</p>
</blockquote>
<p>通俗的讲原型就是prototype是函数的一个属性，每个函数都有一个prototype属性，可以通过原型去改写对象下面公用的方法和属性，让公用的方法或者属性在内存中存在一份，提高性能。所以原型对象的用途是为每个实例对象存储共享的方法和属性，它仅仅是一个普通对象而已。并且所有的实例是共享同一个原型对象，因此有别于实例方法或属性，原型对象仅有一份。</p>
<h2 id="2-prototype，-proto-和原型链"><a href="#2-prototype，-proto-和原型链" class="headerlink" title="2.prototype，__proto__和原型链"></a>2.prototype，__proto__和原型链</h2><p>前面提到过，prototype是函数的一个内置属性，__proto__则是对象的内置属性（指针）。<br>__proto__是JS内部使用寻找原型链的属性。<br><strong>特别需要注意的是：只有函数才有prototype属性，普通对象是没有prototype属性的。</strong><br><strong>但所有的对象都有__proto__属性</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">/*new的过程拆分成以下三步：</span><br><span class="line">(1) var p=&#123;&#125;; 也就是说，初始化一个对象p</span><br><span class="line">(2) p.__proto__ = Person.prototype;</span><br><span class="line">(3) Person.call(p); 也就是说构造p，也可以称之为初始化p*/</span></span><br><span class="line">alert(p.__proto__ === Person.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/uploads/prototype2.jpg" alt=""><br>如上图，在js中，对象在调用一个方法时会首先在自身里寻找是否有该方法，若没有，则去原型链上去寻找，依次层层递进，直到Object.__proto__=null为止，这里的原型链就是实例对象的proto属性，而这样一层层往上追溯，一环扣一环，就是原型链了。</p>
<h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h2><p>在传统面向对象的语言中，有两个非常重要的概念 - 类和实例。 类定义了一类事物公共的行为和方法；而实例则是类的一个具体实现。 另外，面向对象编程有三个重要的概念 - 封装、继承和多态。</p>
<p>但是在JavaScript的世界中，所有的这一切特性似乎都不存在。 因为JavaScript本身不是面向对象的语言，而是基于对象的语言。 这里面就有一些有趣的特性，比如JavaScript中所有事物都是对象， 包括字符串、数组、日期、数字，甚至是函数。</p>
<p>其实当初网景公司的工程师Brendan Eich觉得没有必要把这门语言搞得和C++，Java那么复杂。不过他还是受到了当时思想的影响，Javascript一切皆对象。他引入了new关键字，后面跟构造函数来继承，但是有一个缺点就是无法共享属性和方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Person(name)&#123;</span><br><span class="line">	this.name=name;</span><br><span class="line">	this.species=&apos;human&apos;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var man = new Person(&apos;John&apos;);</span><br><span class="line">var woman = new Person(&apos;Alice&apos;);</span><br></pre></td></tr></table></figure></p>
<p>用了new关键字后，每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的内存资源浪费,1994的硬件条件，你懂的~<br>考虑到这一点，Brendan Eich决定为构造函数设置一个prototype属性。所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。<br>就这样大神花了10天时间…就定下了Javascript基于原型的继承机制。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript学习笔记-Day3]]></title>
      <url>https://imjohnny.github.io/2016/05/27/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Day3/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/learnDay3.jpg" alt=""><br>Day3<br>我觉得写原生JS的很多效果，选项卡Tab是个非常重要的基础内容。很多其他复杂的效果其实都和选项卡的思路类似或者接近。<br><a id="more"></a></p>
<h2 id="1-选项卡"><a href="#1-选项卡" class="headerlink" title="1.选项卡"></a>1.选项卡</h2><p>说到选项卡，自然就要用到事件，那搞清楚this就显的非常重要了。在选项卡事件函数里面this表示你点到的元素（代表事件发生在谁的头上，this就指向谁）。<br>还有JS的自定义属性，比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.index=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>JS的自定义属性存在于JS的内部，和HTML没有半毛钱的关系。<br>如果用一句话来概括选项卡的思路那就是<strong>“干掉所有，点亮自己”</strong>。<br>HTML结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><br><span class="line">.tab div&#123;width:100px; height:100px; margin-top:10px; background:#333; display:none; border-radius: 5px; color: #fff; line-height: 100px; font-size: 3rem; text-align: center;&#125;</span><br><span class="line">.tab .active&#123;background:yellow;&#125;</span><br><span class="line">.tab .current&#123;display:block;&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"电影"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"综艺"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"纪录片"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>封装tab和showTab函数来处理多个选项卡。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	tab(<span class="string">'tab'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tab</span>(<span class="params">sClass</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> aDiv=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aDiv.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(aDiv[i].className==sClass)&#123;</span><br><span class="line">			showTab(aDiv[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//处理tab函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTab</span>(<span class="params">oDiv</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> aDiv=oDiv.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line">	<span class="keyword">var</span> aIpt=oDiv.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aIpt.length;i++)&#123;</span><br><span class="line">		aIpt[i].index=i;<span class="comment">//使用自定义属性，发索引</span></span><br><span class="line">		aIpt[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aIpt.length;i++)&#123;</span><br><span class="line">				aIpt[i].className=<span class="string">''</span>;</span><br><span class="line">				aDiv[i].className=<span class="string">''</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.className=<span class="string">'active'</span>;</span><br><span class="line">			aDiv[<span class="keyword">this</span>.index].className=<span class="string">'current'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-什么是封装？"><a href="#2-什么是封装？" class="headerlink" title="2.什么是封装？"></a>2.什么是封装？</h2><p>封装就是把具有某种功能的代码块放到函数里面，重复使用。</p>
<h2 id="3-innerHTML"><a href="#3-innerHTML" class="headerlink" title="3.innerHTML"></a>3.innerHTML</h2><p>innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。</p>
<h2 id="4-关于循环当中i的问题"><a href="#4-关于循环当中i的问题" class="headerlink" title="4.关于循环当中i的问题"></a>4.关于循环当中i的问题</h2><p>当循环结束时，循环当中的i其实已经变成了length。因为计算机的执行速度很快，循环是在一瞬间完成的。<br>建议不要在事件函数内直接使用i来做对象的索引，可以使用自定义属性来代替。</p>
<h2 id="5-JS当中的数据类型"><a href="#5-JS当中的数据类型" class="headerlink" title="5.JS当中的数据类型"></a>5.JS当中的数据类型</h2><p>typeof 数据 –&gt; 返回数据的数据类型<br>null –&gt; 空对象</p>
<p>所有常见数据类型：</p>
<ul>
<li>number（NaN）数字</li>
<li>string 字符串</li>
<li>boolean 布尔值</li>
<li>object（null） 对象</li>
<li>undefined 未定义</li>
<li>function 函数 很多人觉得函数是一种数据类型，但是也有很多人觉得函数是对象的一种。</li>
</ul>
<p>基本数据类型：number string boolean undefined<br>复合数据类型：object</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于数组去重]]></title>
      <url>https://imjohnny.github.io/2016/05/26/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/array_unique.jpg" alt=""><br>数组去重想必大家在工作当中都碰到过，今天总结一下我的一些方法。<br><a id="more"></a></p>
<h2 id="1-判断函数"><a href="#1-判断函数" class="headerlink" title="1.判断函数"></a>1.判断函数</h2><p>定义一个findInArr的判断函数，如果有相同的就返回true,不相同就返回false<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findInArr</span>(<span class="params">arr,n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i]==n)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>然后通过循环遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!findInArr(arr2,arr[i]))&#123;</span><br><span class="line">		arr2.push(arr[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-删除自身重复的项"><a href="#2-删除自身重复的项" class="headerlink" title="2.删除自身重复的项"></a>2.删除自身重复的项</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;<span class="keyword">this</span>.length;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>[i]==<span class="keyword">this</span>[j])&#123;</span><br><span class="line">				<span class="keyword">this</span>.splice(j--,<span class="number">1</span>);	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-使用indexOf方法"><a href="#3-使用indexOf方法" class="headerlink" title="3.使用indexOf方法"></a>3.使用indexOf方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n=[];<span class="comment">//新的临时数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n.indexOf(<span class="keyword">this</span>[i])==<span class="number">-1</span>)&#123;</span><br><span class="line">			n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//兼容IE6-8</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf=<span class="built_in">Array</span>.prototype.indexOf||<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>[i]==data)&#123;</span><br><span class="line">			<span class="keyword">return</span> i;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>另外一种方法也是使用indexOf方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n=[<span class="keyword">this</span>[<span class="number">0</span>]];<span class="comment">//新的临时数组</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//从目标数组第2个开始遍历</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.indexOf(<span class="keyword">this</span>[i])==i)&#123;</span><br><span class="line">			<span class="comment">//indexOf只返回数组中第一个相同项的索引</span></span><br><span class="line">			n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-利用json的映射关系去重"><a href="#4-利用json的映射关系去重" class="headerlink" title="4.利用json的映射关系去重"></a>4.利用json的映射关系去重</h2><p>要注意数组里面相同内容，但是数据类型不一致的情况，比如11和’11’。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n = &#123;&#125;,r=[]; <span class="comment">//n为json，r为临时数组</span></span><br><span class="line">	<span class="keyword">var</span> type=<span class="string">''</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) <span class="comment">//遍历当前数组</span></span><br><span class="line">	&#123;</span><br><span class="line">		type=<span class="keyword">typeof</span>(<span class="keyword">this</span>[i]);</span><br><span class="line">		<span class="keyword">if</span> (!n[<span class="keyword">this</span>[i]+type]) <span class="comment">//如果json中没有当前项</span></span><br><span class="line">		&#123;</span><br><span class="line">			n[<span class="keyword">this</span>[i]+type] = <span class="literal">true</span>; <span class="comment">//存入json</span></span><br><span class="line">			r.push(<span class="keyword">this</span>[i]); <span class="comment">//把当前数组的当前项push到临时数组里面</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript学习笔记-Day2]]></title>
      <url>https://imjohnny.github.io/2016/05/26/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Day2/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/learnDay2.jpg" alt=""><br>Day2<br>今天我们来讨论一下js里面的基本数据类型，变量还有函数。</p>
<h2 id="1-JS里面的基本数据类型"><a href="#1-JS里面的基本数据类型" class="headerlink" title="1.JS里面的基本数据类型"></a>1.JS里面的基本数据类型</h2><ul>
<li>字符串String，被引号包着的就是字符。</li>
<li>数字Number，能够参与数学运算。</li>
<li>布尔Boolean，true or false</li>
</ul>
<h2 id="2-变量出现的地方，就和值（内容本身）出现是一样的。"><a href="#2-变量出现的地方，就和值（内容本身）出现是一样的。" class="headerlink" title="2.变量出现的地方，就和值（内容本身）出现是一样的。"></a>2.变量出现的地方，就和值（内容本身）出现是一样的。</h2><p><strong>变量和字符的区别：加了引号就是字符，不加就是变量。</strong><br>变量需要先定义再使用，变量的值，以使用时为准。<br><a id="more"></a></p>
<h2 id="3-函数的定义："><a href="#3-函数的定义：" class="headerlink" title="3.函数的定义："></a>3.函数的定义：</h2><p>包了一段代码，需要的时候拿来直接用。<br><strong>函数在哪里定义并不重要，重要的是在哪里调用</strong></p>
<h2 id="4-函数的传参："><a href="#4-函数的传参：" class="headerlink" title="4.函数的传参："></a>4.函数的传参：</h2><p>为什么函数需要传参？函数里面有确定不下来的东西时，就需要提供参数。<br>如何传参？<br>调用的时候：函数名（要传的参数）<br>定义的时候：function 函数名（参数）<br>参数可以传递多个，参数之间用逗号隔开</p>
<h2 id="5-获取属性"><a href="#5-获取属性" class="headerlink" title="5.获取属性"></a>5.获取属性</h2><p>oElement.value/oElement.title   方法1<br>oElement[value]/oElement[title] 方法2<br>当属性不确定时，使用方法2获取属性值。</p>
<h2 id="6-if判断"><a href="#6-if判断" class="headerlink" title="6.if判断"></a>6.if判断</h2><p>if(条件){代码}                                     1种情况的判断<br>if(条件){代码1}else{代码2}                         2种情况的判断<br>if(条件1){代码1}else if(条件2){代码2}else{代码3}      3种情况的判断<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>）&#123;<span class="comment">//多种情况</span></span><br><span class="line">    代码<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;        </span><br><span class="line">    代码<span class="number">2</span></span><br><span class="line">...<span class="comment">//else if(条件n)&#123;&#125;--&gt;无限复制</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    代码n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>else if /else     不是必须的，但是if必不可少</p>
<h2 id="7-匿名函数："><a href="#7-匿名函数：" class="headerlink" title="7.匿名函数："></a>7.匿名函数：</h2><p>function(){代码};<br>匿名函数就是没有名字的函数。<br><strong>但凡函数名出现的地方，就等于函数本身出现</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var show = function()&#123;alert('abc)&#125;;</span><br><span class="line">show();//abc</span><br></pre></td></tr></table></figure></p>
<h2 id="8-window-onload"><a href="#8-window-onload" class="headerlink" title="8.window.onload"></a>8.window.onload</h2><p>当窗口内容全部加载完毕时，执行代码。（包括图片等全部加载完毕）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	代码</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="9-获取一组元素"><a href="#9-获取一组元素" class="headerlink" title="9.获取一组元素"></a>9.获取一组元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取一组div元素</span></span><br><span class="line"><span class="keyword">var</span> aDiv=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)；</span><br></pre></td></tr></table></figure>
<p>这个获取的集合是一个伪数组<br>下标 就是代表是第几个元素 aDiv[下标] eg. aDiv[0]代表第一个元素<br>长度 有多少个元素 length<br>在原生的javascript中一组元素没有办法一起操作。</p>
<h2 id="10-遍历（循环）"><a href="#10-遍历（循环）" class="headerlink" title="10.遍历（循环）"></a>10.遍历（循环）</h2><p>循环：重复执行一段代码。<br>循环的步骤：</p>
<ol>
<li>初始值</li>
<li>条件</li>
<li>执行语句</li>
<li>自增<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="comment">//条件)&#123;</span></span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">    i++;<span class="comment">//自增</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for循环</span></span><br><span class="line"><span class="keyword">for</span>(初始化;条件;自增)&#123;</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="11-取反"><a href="#11-取反" class="headerlink" title="11.!取反"></a>11.!取反</h2><p>原来的状态取相反值<br>！内容</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript学习笔记 Day1]]></title>
      <url>https://imjohnny.github.io/2016/05/25/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Day1/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/learn.jpg" alt=""></p>
<h2 id="前端三架马车之Javascript"><a href="#前端三架马车之Javascript" class="headerlink" title="前端三架马车之Javascript"></a>前端三架马车之Javascript</h2><p>一直以来学习JS总是断断续续，用到了啃一块，没有一个系统的学习过程。今年3月份的时候，打算完整的学习一下，给自己充一下电。所以就有了下面的一系列的学习笔记。<br><a id="more"></a></p>
<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>1、浏览器里面的javascript是干什么的？</p>
<p>通俗点说其实就是实现浏览器的一些功能，最主要的就是修改样式，而且修改的还是行间样式。</p>
<p>2、再来说说一直说的事件，简单点就是用户的操作，像鼠标的点击、滑入、滑出等等。<br>onclick/onmouseover/onmouseout/onmousemove/…</p>
<p>3、alert也是很有用的一个函数，暂停后续代码的执行，等待用户的确认，用于代码调试。</p>
<p>4、js常用的自然就是抓取对象了<br>document指的文档，也就是整个页面，document.getElementById(‘id属性名’);<br>eg：document.getElementById(‘div1′).style.display=’none’;</p>
<p>5、关于单引号还是双引号的问题<br>一般我是在html结构里面使用双引号，js里面使用单引号，当然双引号和单引号都是可以通用的，只要不是一单一双使用就可以喽，<br>另外注意单双内外错开使用。</p>
<p>6、对于JS来说，任何元素都可以添加事件，任何CSS属性都可以修改。<br>html属性名=值<br>就算是link标签也可以给id属性</p>
<p>7、什么是函数？</p>
<ul>
<li>函数就是包了一堆代码的代码块</li>
<li>函数申明的基本写法： function 函数名(){JS代码}</li>
<li>函数名()就是调用，函数名注意不要重名会引起冲突，定义了函数以后，不调用，函数里面的代码就不会执行。</li>
<li>函数如果没有定义，但是调用了就会报错…not defined</li>
<li>函数可以一次定义，多次调用，非常方便。</li>
</ul>
<p>8、什么是变量？<br>变量就是一个别名，用来存放数据的。<br>var 变量名=值<br>变量使用非常的方便，可以减少代码的体积并且便于修改。</p>
<p>9、关于错误<br>xxx of null 对象抓取失败<br>xxx not defined 没定义(变量没有，搞了一个a变量，用的b)</p>
<p>10、关于class和style<br>元素.className=值<br>style获取和修改的都是行间样式<br>元素.style.属性名=值; 修改 | 元素.style.属性名; 获取<br>对于同一个元素，不要同时使用class和style，尽量可以使用class。JS直接添加删除就可以完成效果了。</p>
<p>11、CSS优先级 浏览器默认&lt;标签属性&lt;*&lt;tagname&lt;class&lt;id&lt;style&lt;important</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么你要写博客]]></title>
      <url>https://imjohnny.github.io/2016/05/25/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/write.jpg" alt=""></p>
<p>我所指的写博客，不单只是写一篇文章出来这一结果。而应该是写的这一过程，写过技术文章的朋友应该跟我一样有这么一个过程。<br><a id="more"></a></p>
<p>　　1 自己了解学习，文章所涉及到的知识点，及知识点衍生出来的知识点。</p>
<p>　　2 对学习的知识点进行验证，以确保理论值与实践值保持一致</p>
<p>　　3 构思文章的大纲，哪些部分需要重点写，需要配合实例代码，图片等信息</p>
<p>　　4 动手写，写完后再次检查校正并排版，然后发表</p>
<p>　　5 针对网友的评论中提出的问题进行回复</p>
<p>好的博主写文章一般都会经历以上5上步，最终以上5步融合成一个结果那就是”一篇文章” 这一过程也是我心中对的”写博客”一词的诠释 </p>
<h2 id="为什么你要写博客？"><a href="#为什么你要写博客？" class="headerlink" title="为什么你要写博客？"></a>为什么你要写博客？</h2><p>写博客是为了写给自己看。我认为写博客对自己的提高是很大的，刚开始的时候你可能写不出来多少东西，但是只要你坚持写效果就会很明显。</p>
<p>写博文之前，肯定会将要写的博文之中涉及的知识点了解清楚，知识一般都是有联系的，人的记忆是存在记忆曲线的需要不断的重复记忆才能长久的记住某一事物，而每写一篇文章时都会查阅资料，在这一过程中必然会遇到以前记住了而现在渐渐淡忘的知识点，当你再次看到时瞬间就会回想起，此时以前的知识点就得到了强化。</p>
<p>写博文的同时也会锻炼自己的写作水平和提升自己的学习能力。为了博文的准确性，肯定会在网上找资料，在网上找资料找的多了，也就掌握了方法，先百度再bing或者google来找资料，还有很多博客的文章看了以后也是受益良多，特别是某些具体的问题，很多博文直接就有解决方案。</p>
<p>写博文有时候也是一种技术的积累和沉淀，也可能会对别人有所帮助。你在项目里面遇到的难题，花费了大量的时间去解决，然后总结归纳出了解决方案，写在博文里面，以后自己再碰到同样的问题，直接就能一步步的解决了。别人碰到了同样的问题正好搜索到你的博文，就能帮助到别人，何乐而不为呢。</p>
<p>很多技术牛人都有自己的博客，不仅记录了自己的成长，也对很多人的学习提供了帮助。</p>
<h2 id="推荐以下博客："><a href="#推荐以下博客：" class="headerlink" title="推荐以下博客："></a>推荐以下博客：</h2><p><strong><a href="http://www.w3cplus.com/" target="_blank" rel="external">http://www.w3cplus.com/</a> 大漠的博客 大漠在css方面功力深厚，现在在淘宝就职。</strong><br><strong><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">http://www.zhangxinxu.com/</a> 张鑫旭的博客 博文风格幽默，深入浅出，非常有特色 是腾讯的前端工程师</strong><br><strong><a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a> 廖雪峰的官方网站 里面的git和js教程都是不错的</strong><br><strong><a href="http://www.nowamagic.net/" target="_blank" rel="external">http://www.nowamagic.net/</a> 简明现代魔法</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://imjohnny.github.io/2016/05/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
